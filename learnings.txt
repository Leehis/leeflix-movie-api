Learning Point 1:

Ran into issue with pulling the json data when Mongo Database was named "LEEHIS_API_DB". Calls returned with empty json data but created a new database, "leehis-api-db" and the movies collection was in smaller case which solved the issue. 

REST API has multiple layers:
Controller: Only concerns itself with getting a request and returning a ResponseEntity. Calls the methods in the service and returns itself
Service: has most of the business logic. 
Repository: Data access layer of the API. Communicates with the database and returns the data. Has mongo repo implementation.


PathVariable makes it know that the information passed in the path variable will be used in the string 

Dynamic queries (ex: findMovieByImdbId) can be formed by using UNIQUE property names in your model class. If it is not unique you will get unwanted results

Do NOT forget your annotations

Templates: sometimes a repository can't handle the complex operation or can't be implemented in an optimal fashion. here we use templates to form up new dynamic queries and do the job in the database without using the repository. (ex: createReview business logic)

When deploying to Azure through github, I kept receiving a "Cannot find source control token with name github" error but this was solved when I deployed with local git repo and then retried the ci/cd github connection. 

Also ran into an error during the build phase on azure but that was because it failed the tests in the project. Solved it by deleting the test files.


REMEMBER TO CREATE NEW .ENV WITH THE CREDENTIALS LMAO!!!

Changed reviewIds to reviews as it was calling reviewIds on the frontend rather than reviews. Also changed the review service logic to push it to reviews and not reviewIds